//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Player/Scripts/Player Input/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PlayerSettings
{
    public partial class @PlayerController: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""PlayerDefault"",
            ""id"": ""6f2a4d69-0141-4124-b771-3a9a10ca8e46"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a08657dc-6f02-4326-b22b-0d78d3d84098"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5261927a-ef58-49f4-bad9-9b5aaf76f0ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Primary Fire"",
                    ""type"": ""Button"",
                    ""id"": ""abb816ba-db6c-4765-8ee2-b462a73dead2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alternate Fire"",
                    ""type"": ""Button"",
                    ""id"": ""97ce3298-f888-4670-9e05-1011aa631122"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""d6bb186a-27dc-48c7-8d18-12e776c7a863"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""5f6d06c3-e582-4b64-94fb-dc55a4a43874"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2655a9d8-44d1-4d95-ba42-3abe3f1014fb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""af419402-7881-4cd8-8371-d16b00e10b9a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap Weapon Fire"",
                    ""type"": ""Button"",
                    ""id"": ""fe34ecef-f998-46ea-beb9-c7942ee89498"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""67fdff5b-c277-49a7-9c01-3844e1967f84"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be0d6ca1-3c1f-4bc1-b94c-e7497ffe8015"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac823293-082a-4d6e-b187-010a8ddb6a57"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Alternate Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9915da1-7530-4ac4-b075-f2501e6cc3b7"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Alternate Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""603359de-001b-41f5-8ee0-0208d2d712e8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press,Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b0c219f-e970-4934-8eb6-cbdc334dfab4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2b4d7ea-171d-4423-8402-bac049c27691"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd127d25-658f-4869-8830-48da343be290"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fa8b4461-b645-48cf-8383-33655132a57e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""25136202-e975-42dd-9f31-38e59c3c967f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa92bd6f-ed20-4747-8dfd-d27f07a7908b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""39da9cd0-e3c6-4d13-9e32-de5d04a14872"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""daf38dcb-4732-4e63-a7b7-fdce03e16a52"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6934d063-848a-479e-8f71-e410c1546c74"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcfd660d-eeac-404f-9f8a-6d3914d00298"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54e3c3e2-694f-4b35-b031-effd7a2e2542"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47865ce9-f756-4b9f-810e-7a13bd70ec8a"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c11cd78c-de75-4ace-8985-df84332a064a"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a65d3d7f-7231-48dd-9d42-bb02618f674e"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b5cfb8b-df19-4232-bc49-2c0987c44bf2"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Weapon Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause Menu"",
            ""id"": ""2b657f21-66eb-43a0-9fd6-8a91a963aa1f"",
            ""actions"": [
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""7326fcfa-89cf-4bfa-8778-9ff97322d017"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""72695ed0-077a-4d69-8cb5-21a494efd872"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Gamepad;Touch;Joystick;XR"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerDefault
            m_PlayerDefault = asset.FindActionMap("PlayerDefault", throwIfNotFound: true);
            m_PlayerDefault_Jump = m_PlayerDefault.FindAction("Jump", throwIfNotFound: true);
            m_PlayerDefault_Move = m_PlayerDefault.FindAction("Move", throwIfNotFound: true);
            m_PlayerDefault_PrimaryFire = m_PlayerDefault.FindAction("Primary Fire", throwIfNotFound: true);
            m_PlayerDefault_AlternateFire = m_PlayerDefault.FindAction("Alternate Fire", throwIfNotFound: true);
            m_PlayerDefault_Pause = m_PlayerDefault.FindAction("Pause", throwIfNotFound: true);
            m_PlayerDefault_SwapWeapon = m_PlayerDefault.FindAction("Swap Weapon", throwIfNotFound: true);
            m_PlayerDefault_LookY = m_PlayerDefault.FindAction("LookY", throwIfNotFound: true);
            m_PlayerDefault_LookX = m_PlayerDefault.FindAction("LookX", throwIfNotFound: true);
            m_PlayerDefault_SwapWeaponFire = m_PlayerDefault.FindAction("Swap Weapon Fire", throwIfNotFound: true);
            // Pause Menu
            m_PauseMenu = asset.FindActionMap("Pause Menu", throwIfNotFound: true);
            m_PauseMenu_Cancel = m_PauseMenu.FindAction("Cancel", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerDefault
        private readonly InputActionMap m_PlayerDefault;
        private List<IPlayerDefaultActions> m_PlayerDefaultActionsCallbackInterfaces = new List<IPlayerDefaultActions>();
        private readonly InputAction m_PlayerDefault_Jump;
        private readonly InputAction m_PlayerDefault_Move;
        private readonly InputAction m_PlayerDefault_PrimaryFire;
        private readonly InputAction m_PlayerDefault_AlternateFire;
        private readonly InputAction m_PlayerDefault_Pause;
        private readonly InputAction m_PlayerDefault_SwapWeapon;
        private readonly InputAction m_PlayerDefault_LookY;
        private readonly InputAction m_PlayerDefault_LookX;
        private readonly InputAction m_PlayerDefault_SwapWeaponFire;
        public struct PlayerDefaultActions
        {
            private @PlayerController m_Wrapper;
            public PlayerDefaultActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Jump => m_Wrapper.m_PlayerDefault_Jump;
            public InputAction @Move => m_Wrapper.m_PlayerDefault_Move;
            public InputAction @PrimaryFire => m_Wrapper.m_PlayerDefault_PrimaryFire;
            public InputAction @AlternateFire => m_Wrapper.m_PlayerDefault_AlternateFire;
            public InputAction @Pause => m_Wrapper.m_PlayerDefault_Pause;
            public InputAction @SwapWeapon => m_Wrapper.m_PlayerDefault_SwapWeapon;
            public InputAction @LookY => m_Wrapper.m_PlayerDefault_LookY;
            public InputAction @LookX => m_Wrapper.m_PlayerDefault_LookX;
            public InputAction @SwapWeaponFire => m_Wrapper.m_PlayerDefault_SwapWeaponFire;
            public InputActionMap Get() { return m_Wrapper.m_PlayerDefault; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerDefaultActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerDefaultActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerDefaultActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerDefaultActionsCallbackInterfaces.Add(instance);
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @PrimaryFire.started += instance.OnPrimaryFire;
                @PrimaryFire.performed += instance.OnPrimaryFire;
                @PrimaryFire.canceled += instance.OnPrimaryFire;
                @AlternateFire.started += instance.OnAlternateFire;
                @AlternateFire.performed += instance.OnAlternateFire;
                @AlternateFire.canceled += instance.OnAlternateFire;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @SwapWeapon.started += instance.OnSwapWeapon;
                @SwapWeapon.performed += instance.OnSwapWeapon;
                @SwapWeapon.canceled += instance.OnSwapWeapon;
                @LookY.started += instance.OnLookY;
                @LookY.performed += instance.OnLookY;
                @LookY.canceled += instance.OnLookY;
                @LookX.started += instance.OnLookX;
                @LookX.performed += instance.OnLookX;
                @LookX.canceled += instance.OnLookX;
                @SwapWeaponFire.started += instance.OnSwapWeaponFire;
                @SwapWeaponFire.performed += instance.OnSwapWeaponFire;
                @SwapWeaponFire.canceled += instance.OnSwapWeaponFire;
            }

            private void UnregisterCallbacks(IPlayerDefaultActions instance)
            {
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @PrimaryFire.started -= instance.OnPrimaryFire;
                @PrimaryFire.performed -= instance.OnPrimaryFire;
                @PrimaryFire.canceled -= instance.OnPrimaryFire;
                @AlternateFire.started -= instance.OnAlternateFire;
                @AlternateFire.performed -= instance.OnAlternateFire;
                @AlternateFire.canceled -= instance.OnAlternateFire;
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
                @SwapWeapon.started -= instance.OnSwapWeapon;
                @SwapWeapon.performed -= instance.OnSwapWeapon;
                @SwapWeapon.canceled -= instance.OnSwapWeapon;
                @LookY.started -= instance.OnLookY;
                @LookY.performed -= instance.OnLookY;
                @LookY.canceled -= instance.OnLookY;
                @LookX.started -= instance.OnLookX;
                @LookX.performed -= instance.OnLookX;
                @LookX.canceled -= instance.OnLookX;
                @SwapWeaponFire.started -= instance.OnSwapWeaponFire;
                @SwapWeaponFire.performed -= instance.OnSwapWeaponFire;
                @SwapWeaponFire.canceled -= instance.OnSwapWeaponFire;
            }

            public void RemoveCallbacks(IPlayerDefaultActions instance)
            {
                if (m_Wrapper.m_PlayerDefaultActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerDefaultActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerDefaultActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerDefaultActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerDefaultActions @PlayerDefault => new PlayerDefaultActions(this);

        // Pause Menu
        private readonly InputActionMap m_PauseMenu;
        private List<IPauseMenuActions> m_PauseMenuActionsCallbackInterfaces = new List<IPauseMenuActions>();
        private readonly InputAction m_PauseMenu_Cancel;
        public struct PauseMenuActions
        {
            private @PlayerController m_Wrapper;
            public PauseMenuActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Cancel => m_Wrapper.m_PauseMenu_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
            public void AddCallbacks(IPauseMenuActions instance)
            {
                if (instance == null || m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Add(instance);
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }

            private void UnregisterCallbacks(IPauseMenuActions instance)
            {
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
            }

            public void RemoveCallbacks(IPauseMenuActions instance)
            {
                if (m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPauseMenuActions instance)
            {
                foreach (var item in m_Wrapper.m_PauseMenuActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PauseMenuActions @PauseMenu => new PauseMenuActions(this);
        public interface IPlayerDefaultActions
        {
            void OnJump(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnPrimaryFire(InputAction.CallbackContext context);
            void OnAlternateFire(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
            void OnSwapWeapon(InputAction.CallbackContext context);
            void OnLookY(InputAction.CallbackContext context);
            void OnLookX(InputAction.CallbackContext context);
            void OnSwapWeaponFire(InputAction.CallbackContext context);
        }
        public interface IPauseMenuActions
        {
            void OnCancel(InputAction.CallbackContext context);
        }
    }
}
